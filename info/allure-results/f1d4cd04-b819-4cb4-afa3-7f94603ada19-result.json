{"name":"Runs Cucumber Scenarios","status":"broken","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"A method annotated with Before, After, BeforeStep or AfterStep must have one of these signatures:\n * public void before_or_after(io.cucumber.java.Scenario scenario)\n * public void before_or_after()\nat info.hooks.Hooks.setUp(cucumber.api.Scenario)\n\n","trace":"io.cucumber.java.InvalidMethodSignatureException: A method annotated with Before, After, BeforeStep or AfterStep must have one of these signatures:\n * public void before_or_after(io.cucumber.java.Scenario scenario)\n * public void before_or_after()\nat info.hooks.Hooks.setUp(cucumber.api.Scenario)\n\n\r\n\tat io.cucumber.java.InvalidMethodSignatureException$InvalidMethodSignatureExceptionBuilder.build(InvalidMethodSignatureException.java:52)\r\n\tat io.cucumber.java.JavaHookDefinition.createInvalidSignatureException(JavaHookDefinition.java:47)\r\n\tat io.cucumber.java.JavaHookDefinition.requireValidMethod(JavaHookDefinition.java:32)\r\n\tat io.cucumber.java.JavaHookDefinition.<init>(JavaHookDefinition.java:18)\r\n\tat io.cucumber.java.GlueAdaptor.addDefinition(GlueAdaptor.java:27)\r\n\tat io.cucumber.java.JavaBackend.lambda$loadGlue$1(JavaBackend.java:42)\r\n\tat io.cucumber.java.MethodScanner.scan(MethodScanner.java:49)\r\n\tat io.cucumber.java.MethodScanner.scan(MethodScanner.java:40)\r\n\tat io.cucumber.java.MethodScanner.scan(MethodScanner.java:25)\r\n\tat io.cucumber.java.JavaBackend.lambda$loadGlue$2(JavaBackend.java:40)\r\n\tat java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Unknown Source)\r\n\tat java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source)\r\n\tat java.util.stream.ReferencePipeline$Head.forEach(Unknown Source)\r\n\tat java.util.stream.ReferencePipeline$7$1.accept(Unknown Source)\r\n\tat java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)\r\n\tat java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)\r\n\tat java.util.stream.ReferencePipeline$2$1.accept(Unknown Source)\r\n\tat java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source)\r\n\tat java.util.stream.AbstractPipeline.copyInto(Unknown Source)\r\n\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)\r\n\tat java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Unknown Source)\r\n\tat java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Unknown Source)\r\n\tat java.util.stream.AbstractPipeline.evaluate(Unknown Source)\r\n\tat java.util.stream.ReferencePipeline.forEach(Unknown Source)\r\n\tat io.cucumber.java.JavaBackend.loadGlue(JavaBackend.java:40)\r\n\tat io.cucumber.core.runner.Runner.<init>(Runner.java:52)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier.createRunner(ThreadLocalRunnerSupplier.java:51)\r\n\tat java.lang.ThreadLocal$SuppliedThreadLocal.initialValue(Unknown Source)\r\n\tat java.lang.ThreadLocal.setInitialValue(Unknown Source)\r\n\tat java.lang.ThreadLocal.get(Unknown Source)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier.get(ThreadLocalRunnerSupplier.java:43)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.getRunner(CucumberExecutionContext.java:128)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:115)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:113)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:583)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:648)\r\n\tat org.testng.TestRunner.run(TestRunner.java:505)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:455)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:364)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1137)\r\n\tat org.testng.TestNG.runSuites(TestNG.java:1049)\r\n\tat org.testng.TestNG.run(TestNG.java:1017)\r\n\tat org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)\r\n\tat org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)\r\n\tat org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)\r\n"},"stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"arg1","value":"\"Optional[Verify the Audit Log Details]\""},{"name":"arg0","value":"\"User Verifying the update by individual details in Audit Log Screen for Absent and Insufficient Scenario\""}],"start":1646894222769,"stop":1646894222777,"uuid":"f1d4cd04-b819-4cb4-afa3-7f94603ada19","historyId":"a7bba83492d5ed009b7093a719769b4e","fullName":"io.cucumber.testng.AbstractTestNGCucumberTests.runScenario","labels":[{"name":"package","value":"info.testrunner.TestRunner"},{"name":"testClass","value":"info.testrunner.TestRunner"},{"name":"testMethod","value":"runScenario"},{"name":"parentSuite","value":"Default suite"},{"name":"suite","value":"Default test"},{"name":"subSuite","value":"info.testrunner.TestRunner"},{"name":"host","value":"INFO-IN-LTP-061"},{"name":"thread","value":"2364@INFO-IN-LTP-061.main(1)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"}],"links":[]}